#ifndef _MCU_TASK_INTERFACE_H_
#define _MCU_TASK_INTERFACE_H_


typedef void (*MCU_TASK_INTERFACE_INIT_CALLBACK)	(void);

typedef u8 (*MCU_TASK_INTERFACE_IS_RUNABLE_CALLBACK) 	(void);

typedef void (*MCU_TASK_INTERFACE_RUN_CALLBACK)		(void);

typedef void (*MCU_TASK_INTERFACE_BG_RUN_CALLBACK)	(void);

typedef void (*MCU_TASK_INTERFACE_SLEEP_CALLBACK)	(void);

typedef void (*MCU_TASK_INTERFACE_WAKEUP_CALLBACK)	(void);

typedef void (*MCU_TASK_INTERFACE_FINISH_CALLBACK)	(void);

typedef void (*MCU_TASK_INTERFACE_TERMINATE_CALLBACK)	(void);


/*!
 *
 */
typedef struct MCU_TASK_INTERFACE {

	u8 identifier;

	const ux16 SCHEDULE_INTERVAL;
	const ux16 WORST_CASE_EXECUTION_TIME;
	u16 new_run_timeout;
	u16 last_run_time;

	MCU_TASK_INTERFACE_INIT_CALLBACK		init;
	MCU_TASK_INTERFACE_IS_RUNABLE_CALLBACK	is_runable;
	MCU_TASK_INTERFACE_RUN_CALLBACK			run;
	MCU_TASK_INTERFACE_BG_RUN_CALLBACK		background_run;
	MCU_TASK_INTERFACE_SLEEP_CALLBACK		sleep;
	MCU_TASK_INTERFACE_WAKEUP_CALLBACK		wakeup;
	MCU_TASK_INTERFACE_FINISH_CALLBACK		finish;
	MCU_TASK_INTERFACE_TERMINATE_CALLBACK	terminate;

	struct MCU_TASK_INTERFACE*	next_task;

} MCU_TASK_INTERFACE;


#define MCU_TASK_SCHEDULE_NO_TIMEOUT		0


#endif // _MCU_TASK_INTERFACE_H_
